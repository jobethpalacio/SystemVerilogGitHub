#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned RP;
typedef unsigned RO;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef U  FlatNodeNum;
typedef U  InstNum;
typedef unsigned long long TimeStamp64;
typedef U  TimeStamp;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef union {
    double I634;
    unsigned long long I635;
    unsigned  I636[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    struct eblk * I643;
    E_fn  I644;
    struct iptmpl * I645;
    unsigned I647;
    struct eblk * I648;
} eblk_struct;
typedef struct {
    RP  I643;
    RP  I644;
    RP  I645;
    unsigned I647;
    RP  I648;
} RmaEblk;
typedef union {
    double I634;
    unsigned long long I635;
    unsigned  I636[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I674;
    RmaEblk  I642;
    U  I675;
    US  I676 :1;
    US  I677 :4;
    US  I173 :2;
    US  state :2;
    US  I679 :1;
    US  I680 :2;
    US  I681 :2;
    US  fHsim :1;
    US  I682 :1;
    scalar  newval;
    scalar  I684;
    RP  I685;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I664;
    scalar  I665;
    scalar  I666;
    scalar  I667;
    scalar  fHsim :1;
    scalar  I173 :6;
    U  I669;
    EBLK  I670;
    void * I671;
    UP   I672[1];
};
struct RmaMPSched {
    RP  I664;
    scalar  I665;
    scalar  I666;
    scalar  I667;
    scalar  fHsim :1;
    scalar  I173 :6;
    U  I669;
    RmaEblk  I670;
    RP  I671;
    RP   I672[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I664;
    scalar  I665;
    scalar  I666;
    scalar  I667;
    scalar  I173;
    U  I669;
    RmaEblk  I670;
    scalar  I681;
    scalar  I689;
    scalar  I690;
    scalar  I691;
    U  I692;
    RmaClockStruct  I693;
    RmaClockStruct  I694;
    U  state;
    U  I695;
    RP  I645;
    RP  I696;
    RP  I697;
    RP   I672[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I699;
    void * I700;
};
typedef struct {
    RmaEblk  I642;
    RP  I701;
    scalar  I702;
    scalar  I681;
    scalar  I703;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I664;
    scalar  I665;
    scalar  I666;
    scalar  I667;
    scalar  fHsim :1;
    scalar  I173 :6;
    U  I669;
    RmaEblk  I670;
    scalar  I681;
    scalar  I689;
    scalar  I690;
    scalar  I691;
    U  state :4;
    U  I705 :28;
    RmaClockStruct  I693;
    RmaClockStruct  I694;
    RP  I706;
    RP  I645;
    RP  I707;
    RP   I672[1];
};
typedef struct red_t {
    U  I708;
    U  I709;
    U  I710;
} RED;
typedef struct predd {
    PD_e  I173;
    RED   I711[1];
} PREDD;
typedef unsigned long long ULL;
union rhs_value {
    vec32  I712;
    scalar  I702;
    vec32  * I681;
    double I713;
    U  I714;
};
typedef struct nbs_t {
    struct nbs_t * I715;
    struct nbs_t * I717;
    void (* I718)(struct nbs_t * I719);
    unsigned I720 :1;
    unsigned I721 :1;
    unsigned I722 :1;
    unsigned I723 :1;
    unsigned I724 :27;
    void * I725;
    U  I726;
    union rhs_value I727;
    vec32  I634;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I729;
} NBS;
typedef struct {
    RP  I730;
    RP  I696;
    RP  I645;
    RP  I697;
    RmaEblk  I642;
    RmaEblk  I731;
    RP  I732;
    scalar  I702;
    scalar  I681;
    char state;
    uscope_t  I733;
    U  I734;
    RP  I735;
    scalar  I689;
    scalar  I690;
    scalar  I691;
    RmaClockStruct  I693;
    RmaClockStruct  I694;
    RP  I671;
} RmaPulse;
typedef struct {
    UP  I736;
    int * I737;
} TypeData;
struct etype {
    U  I548 :8;
    U  I549 :24;
    U  I550;
    U  I551 :1;
    U  I552 :1;
    U  I553 :1;
    U  I554 :1;
    U  I555 :1;
    U  I556 :1;
    U  I557 :1;
    U  I558 :1;
    U  I559 :1;
    U  I560 :4;
    U  I561 :1;
    U  I562 :1;
    U  I563 :1;
    U  I564 :1;
    U  I565 :1;
    U  I566 :1;
    U  I567 :1;
    U  I568 :1;
    U  I569 :1;
    U  I570 :1;
    U  I571 :2;
    U  I572 :1;
    U  I573 :2;
    U  I574 :1;
    U  I575 :1;
    U  I576 :2;
    TypeData  * I577;
    U  I578;
    U  I579;
    U  I580 :1;
    U  I581 :1;
    U  I582 :1;
    U  I583 :1;
    U  I584 :2;
    U  I585 :2;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :1;
    U  I590 :1;
    U  I591 :1;
    U  I592 :1;
    U  I593 :17;
};
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I741 :1;
    U  I742 :1;
    U  I743 :1;
    U  I744 :1;
    U  I745 :1;
    U  I746 :1;
    U  I747 :1;
    U  I748 :1;
    U  I749 :1;
    U  I750 :1;
    U  I751 :1;
    U  I752 :1;
    U  I753 :1;
    U  I754 :1;
    U  I755 :1;
    U  I756 :1;
    U  I757 :1;
    U  I758 :1;
    U  I759 :1;
    U  I760 :1;
    QIRDModuleType  I761 :2;
    U  I762 :1;
    U  I763 :1;
    U  I764 :1;
    U  I765 :1;
    U  I766 :1;
    U  I767 :1;
    U  I768 :1;
    U  I769 :1;
    U  I770 :1;
    U  I771 :1;
    U  I772 :1;
    U  I773 :1;
    U  I774 :1;
    U  I775 :1;
    U  I776 :1;
    U  I777 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    UP  * I20;
    U  I21;
    UP  * I22;
    U  I23;
    U  I24;
    U  I25;
    U  * I26;
    U  * I27;
    void * I28;
    void * I29;
    U  I30;
    int I31;
    UP  I32;
    U  I33;
    U  I34;
    U  I35;
    UP  I36;
    U  * I37;
    BitFlags  I38;
    U  I39;
    U  I40;
    U  I41;
    U  I42;
    U  I43;
    U  * I44;
    U  I45;
    U  * I46;
    U  I47;
    U  I48;
    U  I49;
    U  I50;
    U  I51;
    U  I52;
    U  I53;
    U  * I54;
    U  * I55;
    U  I56;
    U  I57;
    U  * I58;
    U  I59;
    U  * I60;
    U  I61;
    U  I62;
    U  I63;
    U  I64;
    U  * I65;
    U  I66;
    U  * I67;
    U  I68;
    U  I69;
    U  I70;
    U  I71;
    U  I72;
    U  I73;
    U  * I74;
    char * I75;
    U  I76;
    U  I77;
    U  I78;
    U  I79;
    U  I80;
    U  * I81;
    U  I82;
    U  I83;
    UP  * I84;
    U  I85;
    U  I86;
    UP  * I87;
    U  I88;
    U  I89;
    U  I90;
    U  I91;
    U  I92;
    U  I93;
    U  * I94;
    U  I95;
    U  I96;
    U  * I97;
    U  * I98;
    U  * I99;
    U  * I100;
    U  * I101;
    U  I102;
    U  I103;
    struct taskInfo * I104;
    U  I106;
    U  I107;
    int * I108;
    UP  * I109;
    U  * I110;
    U  I111;
    U  I112;
    U  I113;
    U  I114;
    U  I115;
    struct qrefer * I116;
    U  * I118;
    unsigned * I119;
    void * I120;
    U  I121;
    U  I122;
    U  I123;
    U  I124;
    U  * I125;
    U  I126;
    U  * I127;
    U  I128;
    U  I129;
    U  I130;
    U  * I131;
    U  I132;
    U  * I133;
    U  I134;
    U  I135;
    U  * I136;
    U  I137;
    U  I138;
    U  * I139;
    U  * I140;
    U  * I141;
    U  I142;
    U  I143;
    U  I144;
    U  I145;
    U  I146;
    struct qrefee * I147;
    U  * I149;
    U  I150;
    struct qdefrefee * I151;
    U  * I153;
    int (* I154)(void);
    char * I155;
    U  I156;
    U  I157;
    void * I158;
    void * I159;
    NumLibs_t  I160;
    char * I161;
    U  * I162;
    U  I163;
    U  I164;
    U  I165;
    U  I166;
    U  I167;
    U  * I168;
    U  * I169;
    int I170;
    struct clock_load * I171;
    int I186;
    struct clock_data * I187;
    int I203;
    struct clock_hiconn * I204;
    U  I208;
    int I209;
    U  I210;
    int I211;
    U  * I212;
    U  * I213;
    U  I214;
    void * I215;
    U  I216;
    U  I217;
    UP  * I218;
    void * I219;
    U  I220;
    UP  * I221;
    U  * I222;
    int (* I223)(void);
    U  * I224;
    UP  * I225;
    U  * I226;
    U  I227 :1;
    U  I228 :31;
    U  I229;
    U  I230;
    UP  * I231;
    U  * I232;
    U  I233 :1;
    U  I234 :1;
    U  I235 :1;
    U  I236 :1;
    U  I237 :28;
    U  I238;
    U  I239;
    U  I240;
    U  I241;
    UP  * I242;
    UP  * I243;
    U  * I244;
    U  * I245;
    U  * I246;
    UP  * I247;
    UP  * I248;
    UP  * I249;
    U  * I250;
    UP  * I251;
    UP  * I252;
    UP  * I253;
    char * I254;
    U  I255;
    U  I256;
    U  I257;
    UP  * I258;
    UP  * I259;
    UP  * I260;
    UP  * I261;
    UP  * I262;
    UP  * I263;
    UP  * I264;
    UP  * I265;
    UP  * I266;
    UP  * I267;
    UP  * I268;
    UP  * I269;
    U  I270;
    U  I271;
    U  I272;
    U  I273;
    U  I274;
    U  I275;
    U  I276;
    char * I277;
    U  * I278;
    U  I279;
    U  I280;
    U  I281;
    UP  * I282;
    UP  * I283;
    UP  * I284;
    UP  * I285;
    struct daidirInfo * I286;
    struct vcs_tftable * I288;
    U  I290;
    UP  * I291;
    UP  * I292;
    U  I293;
    U  I294;
    U  I295;
    UP  * I296;
    U  * I297;
    struct qird_hil_data * I298;
    UP  (* I300)(void);
    UP  (* I301)(void);
    UP  (* I302)(void);
    UP  (* I303)(void);
    UP  (* I304)(void);
    int * I305;
    int (* I306)(void);
    char * I307;
    UP  * I308;
    UP  * I309;
    UP  (* I310)(void);
    int (* I311)(void);
    int * I312;
    int (* I313)(void);
    int * I314;
    char * I315;
    U  * I316;
    U  * I317;
    void * I318;
    void * I319;
    U  I320;
    U  I321;
    U  I322;
    U  I323;
    U  I324;
    U  I325;
    UP  * I326;
    U  * I327;
    U  * I328;
    U  I329 :15;
    U  I330 :14;
    U  I331 :1;
    U  I332 :1;
    U  I333 :1;
    U  I334 :3;
    U  I335 :1;
    U  I336 :1;
    U  I337 :17;
    U  I338 :3;
    U  I339 :5;
    U  I340 :2;
    U  I341;
    struct scope * I342;
    U  I344;
    U  I345;
    U  I346;
    U  * I347;
    U  * I348;
    U  * I349;
    U  I350;
    U  I351;
    U  I352;
    struct pcbt * I353;
    U  I363;
    U  I364;
    U  I365;
    U  I366;
    void * I367;
    void * I368;
    void * I369;
    int I370;
    U  * I371;
    U  I372;
    U  I373;
    U  I374;
    U  I375;
    U  I376;
    U  I377;
    U  I378;
    void * I379;
    UP  * I380;
    U  I381;
    U  I382;
    void * I383;
    U  I384;
    void * I385;
    U  I386;
    void * I387;
    U  I388;
    int (* I389)(void);
    int (* I390)(void);
    void * I391;
    void * I392;
    void * I393;
    U  I394;
    U  I395;
    U  I396;
    U  I397;
    U  I398;
    U  I399;
    char * I400;
    U  I401;
    U  * I402;
    U  I403;
    U  * I404;
    U  I405;
    U  I406;
    U  I407;
    U  I408;
    U  I409;
    U  I410;
    U  * I411;
    U  I412;
    U  I413;
    U  * I414;
    U  I415;
    U  * I416;
    char * I417;
    U  I418;
    U  I419;
    U  I420;
    U  I421;
    U  * I422;
    U  * I423;
    U  I424;
    U  * I425;
    U  * I426;
    U  I427;
    U  I428;
    U  I429;
    U  I430;
    struct cosim_info * I431;
    U  I433;
    U  * I434;
    U  I435;
    U  I436;
    U  * I437;
    U  I438;
    U  * I439;
    U  I440;
    U  I441;
    U  * I442;
    U  I443;
    U  * I444;
    U  I445;
    U  I446;
    U  I447;
    U  I448;
    U  I449;
    U  I450;
    U  I451;
    U  I452;
    U  I453;
    U  * I454;
    U  * I455;
    void (* I456)(void);
    U  * I457;
    UP  * I458;
    struct mhdl_outInfo * I459;
    UP  * I461;
    U  I462;
    UP  * I463;
    U  I464;
    void * I465;
    U  * I466;
    void * I467;
    U  I468;
    U  I469;
    void * I470;
    void * I471;
    U  * I472;
    U  * I473;
    U  * I474;
    U  * I475;
    void * I476;
    U  I477;
    void * I478;
    U  * I479;
    char * I480;
    int (* I481)(void);
    U  * I482;
    char * I483;
    char * I484;
    U  I485;
    U  * I486;
    char * I487;
    U  I488;
    struct regInitInfo * I489;
    UP  * I491;
    U  * I492;
    char * I493;
    U  I494;
    U  I495;
    U  I496;
    U  I497;
    U  I498;
    U  I499;
    U  I500;
    U  I501;
    U  * I502;
    U  * I503;
    U  I504;
    U  I505;
    U  I506;
    U  I507;
    UP  * I508;
    U  I509;
    UP  * I510;
    U  I511;
    U  I512;
    U  I513;
    U  * I514;
    U  I515;
    U  I516;
    U  I517;
    U  * I518;
    U  * I519;
    UP  * I520;
    UP  * I521;
    void * I522;
    UP  I523;
    void * I524;
    void * I525;
    void * I526;
    void * I527;
    U  * I528;
    U  * I529;
    void * I530;
    U  I531 :1;
    U  I532 :31;
    U  I533;
    U  I534;
    int I535;
    void * I536;
    UP  * I537;
    UP  I538;
    U  I539;
    char * I540;
    U  * I541;
    U  * I542;
    char * I543;
    int * I544;
    UP  * I545;
    struct etype * I546;
    U  I594;
    U  I595;
    U  * I596;
    U  I597;
    U  * I598;
    U  I599;
    U  I600;
    U  * I601;
};
typedef struct pcbt {
    U  * I355;
    UP  I356;
    U  I357;
    U  I358;
    U  I359;
    U  I360;
    U  I361;
    U  I362;
} PCBT;
struct iptmpl {
    QIRD  * I649;
    struct vcs_globals_t * I650;
    void * I652;
    UP  I653;
    UP  I654;
    struct iptmpl * I645[2];
};
typedef unsigned long long FileOffset;
typedef struct _hsimPeriodL {
    char  I816[256];
    struct _hsimPeriodL * I782;
} HsimPeriodL;
typedef struct {
    U   I818[2];
    U  I819 :1;
    U  I820 :1;
    U  I821 :8;
    U  I822 :8;
    U  I823 :8;
    U  I824 :4;
    unsigned long long I825;
    unsigned long long I826;
    unsigned long long I827;
    unsigned long long I828;
    unsigned long long I829;
    U  I830;
    U  I831;
    U  I832;
    U  I833;
    HsimPeriodL  * I834;
    HsimPeriodL  * I835;
    U  I836;
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I837;
    InstNum  I838;
    U  I790;
    scalar  I839;
    UB  I840;
    UB  I841;
    UB  I842;
    U  I843;
    U  I844;
    U  I845;
    U  I846;
    U  I847;
    HsimSignalMonitor  * I848;
    RmaTimeStamp64  I849;
    U  I850;
    RmaTimeStamp64  I851;
} HsimNodeRecord;
typedef struct {
    RP  I852;
    RP  I645;
} RmaIbfIp;
typedef struct {
    RP  I852;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I642;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RmaEblk  I642;
    RP  I853;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I642;
    RP  I854;
    RP  I853;
    vec32  I855;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I642;
    RP  I854;
    RP  I853;
    vec32   I680[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I642;
    RP  I854;
    RP  I853;
    scalar   I856[1];
} RmaAnySchedECg;
typedef struct {
    RP  I857;
} RmaRootCbkCg;
typedef struct {
    RP  I858;
} RmaRootVcdCg;
typedef struct {
    RP  I859;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I642;
    RP  I860;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I638 :30;
    U  I861 :1;
    U  I862 :1;
    vec32  I712;
    U  I863;
    RP  I864;
    RP  I865;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I871;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I605;
    RmaIbfPcode   I871[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I871;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I872;
    U  I873 :3;
    U  I874 :1;
    U  I875 :1;
} RmaNbaGateOfn;
typedef struct {
    NBS  I876;
    RmaIbfPcode  I872;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct {
    U  I5;
    U  iinput;
    RP  I879;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    RP  I879;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I880;
    U  * I881;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I882;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I882;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I642;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I642;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I642;
    RP  pcode;
    RP  pfn;
    scalar  I883;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I884;
    RP  I885;
    RP  I886;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I642;
    RP  pcode;
    U  I790;
    U   I631[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I711;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaGateDelay;
typedef struct {
    U  I5;
    union {
        RP  I1012;
        RP  I1260;
        RP  I1271;
    } I685;
    RmaIbfPcode  I872;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I887;
    RmaIbfPcode  I872;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I872;
    RmaMps  I888;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I889;
    RmaIbfPcode  I872;
    RmaEblk  I670;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I872;
    RmaMpspNewCsdf  I890;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I890;
    RmaIbfPcode  I872;
} RmaMPPulseOptHybridDelay;
typedef struct {
    U  I5;
    U  I710;
    RmaTransEventHdr  I796;
    RP  I707;
    RmaIbfPcode  I872;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I710;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I891;
    U  I892;
    RmaTransEventHdr  I796;
    RP  I707;
    RmaIbfPcode  I872;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I891;
    U  I892;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I893;
    RmaTransEventHdr  I796;
    RP  I707;
    RmaIbfPcode  I872;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I893;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I711;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1260;
        RP  I1271;
    } I685;
    RmaIbfPcode  I872;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I711;
    RmaEblk  I642;
    RmaIbfPcode  I872;
} RmaPortDelay;
typedef struct TableAssign_ {
    struct TableAssign_ * I782;
    struct TableAssign_ * I701;
    U  I5;
    U  iinput;
    RP  ptable;
    RP  I882;
} TableAssign;
typedef struct {
    U  I5;
    RP  I701;
    RP  I895;
} RmaTableAssignList;
typedef struct {
    RP  I896;
} RmaWakeupListCg;
typedef struct {
    U  I897;
    U  I898;
    RmaTimeStamp   I899[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I900;
} RmaConditionsMdb;
typedef struct {
    RP  I782;
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I782;
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I912;
} RmaTcCoreConditional;
typedef struct {
    RP  I782;
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I912;
    RP  I913;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I782;
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I913;
    RP  I914;
    U  I915;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I917;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I912;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I912;
    RP  I913;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I913;
    RP  I914;
    U  I915;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I913;
    RP  I914;
    RP  I917;
    U  I915;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    RP  I912;
    RP  I917;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I901;
    RP  I637;
    U  I902;
    scalar  I903;
    scalar  I904;
    US  I905 :1;
    US  I906 :1;
    US  I907 :1;
    US  I908 :1;
    US  I909 :1;
    US  I910 :1;
    US  I911 :5;
    U  I918;
    RP  I919;
    RP  I920;
    RP  I912;
    RP  I921;
    RP  I922;
    RmaTimeStamp  I923;
} RmaTcCoreNochange;
typedef struct {
    RP  I924;
    RP  I782;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I900;
    RmaTimeStamp  I925;
    scalar  I926;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I782;
    RP  I900;
    RmaTimeStamp  I925;
    scalar  I926;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I925;
    scalar  I926;
    US  I903;
    RP  I913;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I782;
    RmaTimeStamp  I925;
    scalar  I926;
    US  I903;
    RP  I913;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I913;
    RP  I927;
    U  I915;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I917;
    RP  I913;
    RP  I927;
    U  I915;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I782;
    RP  I913;
    RP  I927;
    U  I915;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I928;
    U  I929;
    FlatNodeNum  I930;
    U  I790;
    U  I931;
    U  I932;
    RmaIbfPcode  I872;
    union {
        scalar  I933;
        vec32  I934;
        scalar  * I935;
        vec32  * I936;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I782;
    RP  I701;
    RP  I937;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I938;
    U  I939 :1;
    U  I940 :1;
    U  I941 :1;
    U  I942 :4;
    U  I576 :25;
    U  I943;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1301;
        RmaSwitchGateInCbkListInfo  I2;
    } I616;
    RmaIbfPcode  I872;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I944;
    scalar  val;
    scalar  I173 :4;
    scalar  I945 :1;
    scalar  I946 :1;
    scalar  I947 :1;
    scalar  I948 :1;
    RP  I715;
    RP  I949;
    RP  I930;
    RP  I950;
    RP  I951;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I952;
    UB  I953;
    RmaNonEdgeLoadData1  * I954;
    RmaNonEdgeLoadData1  * I701;
} RmaNonEdgeLoadHdr1;
typedef struct {
    U  I5;
    U  I955;
} RmaHDLCosimDUTGate;
struct clock_load {
    U  I173 :5;
    U  I174 :12;
    U  I175 :1;
    U  I176 :2;
    U  I177 :1;
    U  I178 :1;
    U  I179 :1;
    U  I180 :9;
    U  I181;
    U  I182;
    void (* pfn)(void * I184, char val);
};
typedef struct clock_data {
    U  I189 :1;
    U  I190 :1;
    U  I191 :1;
    U  I192 :1;
    U  I173 :5;
    U  I174 :12;
    U  I193 :6;
    U  I194 :1;
    U  I176 :2;
    U  I177 :1;
    U  I180 :1;
    U  I195;
    U  I196;
    U  I197;
    U  I181;
    U  I198;
    U  I199;
    U  I200;
    U  I201;
    U  I202;
} HdbsClockData;
struct clock_hiconn {
    U  I206;
    U  I207;
    U  I181;
    U  I176;
};
typedef struct _RmaDaiCg {
    RP  I956;
    RP  I957;
    U  I958;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I956;
    RP  I959;
    RP  I960;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I961;
} RmaDaiOptCg;
struct futq {
    struct futq * I655;
    struct futq * I657;
    RmaEblk  * I658;
    RmaEblk  * I659;
    U  I647;
};
struct sched_table {
    struct futq * I660;
    struct futq I661;
    struct hash_bucket * I662;
};
struct dummyq_struct {
    clock_struct  I965;
    EBLK  * I966;
    EBLK  * I967;
    struct futq * I968;
    struct futq * I969;
    struct sched_table * I970;
    struct millenium * I972;
    EBLK  * I974;
    EBLK  * I975;
    EBLK  * I976;
    EBLK  * I977;
    EBLK  * I978;
    EBLK  * I979;
    EBLK  * I980;
    EBLK  * I981;
    EBLK  * I982;
    EBLK  * I983;
    EBLK  * I984;
    EBLK  * I985;
    EBLK  * I986;
    EBLK  * I987;
    EBLK  * I988;
    EBLK  * I989;
    EBLK  * I990;
    MPS  * I991;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    EBLK  * I643;
    EBLK  * I992;
    int I993;
    struct _lqueue * I674;
} Queue;
typedef struct {
    EBLK  I995;
    U  I996;
    union {
        void * pHeap;
        Queue  * pList;
    } I616;
    Queue   I997[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern FP   rmaFunctionRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern UB  dummyScalar;
extern UB  fScalarIsForced;
extern UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern Qhdr  * lvlQueue;
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern UB  fNettypeIsForced;
extern UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(UB *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, UB *e);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U fNonEdgeLoad, UB* plist, scalar v);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hsM_0_0 (UB  * pcode, scalar  val);
void  hsM_0_1 (UB  * pcode, scalar  val, U  I1018, scalar  * I1017);
void  hsM_0_2 (UB  * pcode);
void  hsM_1_0 (UB  * pcode, scalar  val);
void  hsM_1_1 (UB  * pcode, scalar  val, U  I1018, scalar  * I1017);
void  hsM_1_2 (UB  * pcode);
void  hsG_0 (struct dummyq_struct * I1004, EBLK  * I1005, U  I710);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

